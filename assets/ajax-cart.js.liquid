/*============================================================================
  Ajax the add to cart experience by revealing it in a side drawer
  Plugin Documentation - http://shopify.github.io/Timber/#ajax-cart
  (c) Copyright 2015 Shopify Inc. Author: Carson Shold (@cshold). All Rights Reserved.

  This file includes:
    - Basic Shopify Ajax API calls
    - Ajax cart plugin

  This requires:
    - jQuery 1.8+
    - handlebars.min.js (for cart template)
    - modernizr.min.js
    - snippet/ajax-cart-template.liquid

  Customized version of Shopify's jQuery API
  (c) Copyright 2009-2015 Shopify Inc. Author: Caroline Schnapp. All Rights Reserved.
==============================================================================*/
if ((typeof ShopifyAPI) === 'undefined') { ShopifyAPI = {}; }

/*============================================================================
  API Helper Functions
==============================================================================*/
function attributeToString(attribute) {
  if ((typeof attribute) !== 'string') {
    attribute += '';
    if (attribute === 'undefined') {
      attribute = '';
    }
  }
  return jQuery.trim(attribute);
};

/*============================================================================
  API Functions
==============================================================================*/
ShopifyAPI.onCartUpdate = function(cart) {
  // alert('There are now ' + cart.item_count + ' items in the cart.');
};

ShopifyAPI.updateCartNote = function(note, callback) {
  var $body = $(document.body),
  params = {
    type: 'POST',
    url: theme.routes.cartUrl + '/update.js',
    data: 'note=' + attributeToString(note),
    dataType: 'json',
    beforeSend: function() {
      $body.trigger('beforeUpdateCartNote.ajaxCart', note);
    },
    success: function(cart) {
      if ((typeof callback) === 'function') {
        callback(cart);
      }
      else {
        ShopifyAPI.onCartUpdate(cart);
      }
      $body.trigger('afterUpdateCartNote.ajaxCart', [note, cart]);
    },
    error: function(XMLHttpRequest, textStatus) {
      $body.trigger('errorUpdateCartNote.ajaxCart', [XMLHttpRequest, textStatus]);
      ShopifyAPI.onError(XMLHttpRequest, textStatus);
    },
    complete: function(jqxhr, text) {
      $body.trigger('completeUpdateCartNote.ajaxCart', [this, jqxhr, text]);
    }
  };
  jQuery.ajax(params);
};

ShopifyAPI.onError = function(XMLHttpRequest, textStatus) {
  if (navigator.onLine) {
    var data = eval('(' + XMLHttpRequest.responseText + ')');
    if (!!data.message) {
      alert(data.message + '(' + data.status  + '): ' + data.description);
    }
  } else {

  }
};

/*============================================================================
  POST to cart/add.js returns the JSON of the cart
    - Allow use of form element instead of just id
    - Allow custom error callback
==============================================================================*/
ShopifyAPI.addItemFromForm = function(form, callback, errorCallback) {
  var $body = $(document.body),
  params = {
    type: 'POST',
    url: theme.routes.cartAddUrl + '.js',
    data: jQuery(form).serialize(),
    dataType: 'json',
    beforeSend: function(jqxhr, settings) {
      $body.trigger('beforeAddItem.ajaxCart', form);
    },
    success: function(line_item) {
      if ((typeof callback) === 'function') {
        callback(line_item, form);
      } else {
        ShopifyAPI.onItemAdded(line_item, form);
      }

      $body.trigger('afterAddItem.ajaxCart', [line_item, form]);
    },
    error: function(XMLHttpRequest, textStatus) {
      if (errorCallback && (typeof errorCallback) === 'function') {
        errorCallback(XMLHttpRequest, textStatus, form);
      } else {
        ShopifyAPI.onError(XMLHttpRequest, textStatus);
      }
      $body.trigger('errorAddItem.ajaxCart', [XMLHttpRequest, textStatus]);
    },
    complete: function(jqxhr, text) {
      $body.trigger('completeAddItem.ajaxCart', [this, jqxhr, text]);
    }
  };
  jQuery.ajax(params);
};

// Get from cart.js returns the cart in JSON
ShopifyAPI.getCart = function(callback) {
  $(document.body).trigger('beforeGetCart.ajaxCart');
  jQuery.getJSON(theme.routes.cartUrl + '.js', function (cart, textStatus) {
    if ((typeof callback) === 'function') {
      callback(cart);
    }
    else {
      ShopifyAPI.onCartUpdate(cart);
    }
    $(document.body).trigger('afterGetCart.ajaxCart', cart);
  });
};

// POST to cart/change.js returns the cart in JSON
ShopifyAPI.changeItem = function(line, quantity, callback, errorCallback) {
  var $body = $(document.body),
  params = {
    type: 'POST',
    url: theme.routes.cartChangeUrl + '.js',
    data: 'quantity=' + quantity + '&line=' + line,
    dataType: 'json',
    beforeSend: function() {
      $body.trigger('beforeChangeItem.ajaxCart', [line, quantity]);
    },
    success: function(cart) {
      if ((typeof callback) === 'function') {
        callback(cart);
      }
      else {
        ShopifyAPI.onCartUpdate(cart);
      }
      $body.trigger('afterChangeItem.ajaxCart', [line, quantity, cart]);
    },
    error: function(XMLHttpRequest, textStatus) {
      if ((typeof errorCallback) === 'function') {
        errorCallback(XMLHttpRequest, textStatus);
      }
      else {
        ShopifyAPI.onError(XMLHttpRequest, textStatus);
      }
      $body.trigger('errorChangeItem.ajaxCart', [XMLHttpRequest, textStatus]);
    },
    complete: function(jqxhr, text) {
      $body.trigger('completeChangeItem.ajaxCart', [this, jqxhr, text]);
    }
  };
  jQuery.ajax(params);
};

/*============================================================================
  Ajax Shopify Add To Cart
==============================================================================*/
var ajaxCart = (function(module, $) {

  'use strict';

  // Public functions
  var init, initForm, loadCart;

  // Private general variables
  var settings, isUpdating, $body;

  // Private plugin variables
  var $formContainer, $addToCart, $cartCountSelector, $cartCostSelector, $cartContainer, $drawerContainer, $emptySelector, $triggerSelector;

  // Private functions
  var updateCountPrice, formOverride, itemAddedCallback, itemErrorCallback, cartUpdateCallback, buildCart, cartCallback, adjustCart, adjustCartCallback, adjustCartErrorCallback, createQtySelectors, qtySelectors, validateQty;

  /*============================================================================
    Initialise the plugin and define global options
  ==============================================================================*/
  init = function (options) {

    // Default settings
    settings = {
      sourceId           : '#CartTemplate',
      formSelector       : 'form[action^="/cart/add"]',
      cartContainer      : '#CartContainer',
      addToCartSelector  : 'input[type="submit"]',
      cartCountSelector  : null,
      cartCostSelector   : null,
      triggerSelector    : null,
      emptySelector      : null,
      moneyFormat        : '${{amount}}',
      disableAjaxCart    : false,
      enableQtySelectors : true
    };

    // Override defaults with arguments
    $.extend(settings, options);

    // Select DOM elements
    $formContainer     = $(settings.formSelector);
    $cartContainer     = $(settings.cartContainer);
    $addToCart         = $formContainer.find(settings.addToCartSelector);
    $cartCountSelector = $(settings.cartCountSelector);
    $cartCostSelector  = $(settings.cartCostSelector);
    $emptySelector     = $(settings.emptySelector);
    $triggerSelector   = $(settings.triggerSelector);

    // General Selectors
    $body = $(document.body);

    // Track cart activity status
    isUpdating = false;

    // Enable hidden id field
    $formContainer.find('[name="id"]').removeAttr('disabled');

    // Setup ajax quantity selectors on the any template if enableQtySelectors is true
    if (settings.enableQtySelectors) {
      qtySelectors();
    }

    // Take over the add to cart form submit action if ajax enabled
    if (!settings.disableAjaxCart && $addToCart.length) {
      formOverride();
    }

    // Run this function in case we're using the quantity selector outside of the cart
    adjustCart();
  };

  initForm = function(form) {
    if (!form) return;

    const $form = $(form);
    const $thisAddToCart = $form.find(settings.addToCartSelector);

    // Enable hidden id field
    $form.find('[name="id"]').removeAttr('disabled');

    // Setup ajax quantity selectors on the any template if enableQtySelectors is true
    if (settings.enableQtySelectors) {
      qtySelectors(form);
    }

    // Take over the add to cart form submit action if ajax enabled
    if (!settings.disableAjaxCart && $thisAddToCart.length) {
      formOverride(form);
    }
  }

  loadCart = function () {
    $body.addClass('drawer--is-loading');
    ShopifyAPI.getCart(cartUpdateCallback);
  };

  updateCountPrice = function (cart) {
    if ($cartCountSelector) {
      $cartCountSelector.html(cart.item_count).removeClass('hidden-count');

      if (cart.item_count === 0) {
        $cartCountSelector.addClass('hidden-count');
      }
    }
    if ($cartCostSelector) {
      $cartCostSelector.html(Shopify.formatMoney(cart.total_price, settings.moneyFormat));
    }
  };

  formOverride = function (form) {
    const submitCallback = (evt) => {
      evt.preventDefault();

      var thisAddToCart = $(evt.target).find(settings.addToCartSelector);
      // Add class to be styled if desired
      thisAddToCart.removeClass('is-added').addClass('is-adding');

      // Remove any previous quantity errors
      $('.qty-error').remove();

      ShopifyAPI.addItemFromForm(evt.target, itemAddedCallback, itemErrorCallback);
    }

    if (form) {
      const $form = $(form);
      $form.find('[name="id"]').removeAttr('disabled');

      $(form).on('submit', submitCallback);
    } else {
      $formContainer.on('submit', submitCallback);
    }
  };

  //setting up current product data variable
  var thisProduct = {};
  itemAddedCallback = function (product, form) {
    var $body = $(document.body);
    var thisAddToCart = $(form).find(settings.addToCartSelector);

    // Add class to be styled if desired
    thisAddToCart.removeClass('is-adding').addClass('is-added');

    // removes button styling when animation finishes
    form.querySelector(".js-product-add.is-added").addEventListener("animationend", function() {
      const quickShopElement = form.closest("quick-shop");
      const addedFromCard = !!form.closest(".product-card");

      thisAddToCart.removeClass('is-added');
      $body.trigger('afterButtonAnimation.ajaxCart', [quickShopElement, addedFromCard]);
    }, { once: true });

    // removes button styling if mouse leaves quick shop card
    if(form.classList.contains('product-form--card') && form.closest(".product-card--trigger-icon")){
      form.closest(".product-card--trigger-icon").addEventListener("mouseleave", function(){
        thisAddToCart.removeClass('is-added');
      }, { once: true });
    }

    // removes button styling if mouse leaves quick shop drawer
    if(form.classList.contains('product-form--card') && form.closest(".mfp-content")){
      form.closest("quick-shop").addEventListener("closed.quickShop", function(){
        thisAddToCart.removeClass('is-added');
      }, { once: true });
    }

    thisProduct = product;

    ShopifyAPI.getCart(cartUpdateCallback);
  };

  itemErrorCallback = function (XMLHttpRequest, textStatus, form) {
    var data = eval('(' + XMLHttpRequest.responseText + ')');
    $addToCart.removeClass('is-adding is-added');

    if (data && !!data.message) {
      if (data.status == 422) {
        $(form).after('<div class="errors qty-error u-small">'+ data.description +'</div>')
      }
    }
  };

  cartUpdateCallback = function (cart) {
    // Update quantity and price
    updateCountPrice(cart);
    buildCart(cart);
  };

  buildCart = function (cart) {
    // Start with a fresh cart div
    $cartContainer.empty();

    // Show empty cart
    if (cart.item_count === 0) {
      $(settings.emptySelector).show();
      $(settings.emptySelector).attr("aria-hidden","false");

      $(settings.cartContainer).hide();

      $(settings.triggerSelector).removeClass('js-cart-full');
      cartCallback(cart);
      return;
    } else {
      $(settings.emptySelector).hide();
      $(settings.emptySelector).attr("aria-hidden","true");

      $(settings.cartContainer).show();

      $(settings.triggerSelector).addClass('js-cart-full');
    }

    // Handlebars.js cart layout
    var items = [],
        item = {},
        thisItem = thisProduct,
        data = {},
        source = $(settings.sourceId).html(),
        template = Handlebars.compile(source);

    // Add each item to our handlebars.js data
    $.each(cart.items, function(index, cartItem) {


      /* Hack to get product image thumbnail
       *   - If image is not null
       *     - Remove file extension, add _medium, and re-add extension
       *     - Create server relative link
       *   - A hard-coded url of no-image
      */

      if (cartItem.image != null){
        var prodImg = cartItem.image.replace(/(\.[^.]*)$/, "_240x$1").replace('http:', '');
      } else {
        var prodImg = null;
      }

      var selling_plan_name = cartItem.selling_plan_allocation ? cartItem.selling_plan_allocation.selling_plan.name : null;
      if (selling_plan_name) {
        selling_plan_name = selling_plan_name;
      } else {
        selling_plan_name = null;
      }

      var unitPriceExists;
      if (typeof cartItem.unit_price != "undefined") {
        unitPriceExists = true;
        var unitPrice = cartItem.unit_price;
        var unitReferenceValue = cartItem.unit_price_measurement.reference_value;
        var unitReferenceUnit = cartItem.unit_price_measurement.reference_unit;
      } else {
        unitPriceExists = false;
      }

      // Create item's data object and add to 'items' array
      item = {
        key: cartItem.key,
        line: index + 1, // Shopify uses a 1+ index in the API
        url: cartItem.url,
        img: prodImg,
        name: cartItem.product_title,
        variation: cartItem.variant_title,
        properties: cartItem.properties,
        sellingPlan: selling_plan_name,
        itemAdd: cartItem.quantity + 1,
        itemMinus: cartItem.quantity - 1,
        itemQty: cartItem.quantity,

        price: Shopify.formatMoney(cartItem.price, settings.moneyFormat),
        originalPrice: Shopify.formatMoney(cartItem.original_price, settings.moneyFormat),
        vendor: cartItem.vendor,
        linePrice: Shopify.formatMoney(cartItem.final_line_price, settings.moneyFormat),
        originalLinePrice: Shopify.formatMoney(cartItem.original_line_price, settings.moneyFormat),

        unitPriceExists: unitPriceExists,
        unitPrice: Shopify.formatMoney(unitPrice, settings.moneyFormat),
        unitReferenceValue: unitReferenceValue,
        unitReferenceUnit: unitReferenceUnit,

        lineDiscount: cartItem.line_level_discount_allocations.length,
        lineDiscounts: cartItem.line_level_discount_allocations.map(function (obj) {
                        return Object.keys(obj).reduce(function (acc, key) {
                          if (key === "amount") {
                            acc[key] = Shopify.formatMoney(obj[key], settings.moneyFormat);
                          } else {
                            acc[key] = obj[key];
                          }
                          return acc;
                        }, {});
                      }),
        lineDiscountedPrice: Shopify.formatMoney(cartItem.final_line_price, settings.moneyFormat),

        discounts: cartItem.discounts,
        discountPrice: Shopify.formatMoney(cartItem.original_price - cartItem.discounted_price, settings.moneyFormat),
        discountsApplied: cartItem.line_price === cartItem.original_line_price ? false : true,
        discountedPrice: Shopify.formatMoney(cartItem.discounted_price, settings.moneyFormat)
      };

      items.push(item);
    });

    if (typeof thisItem.product_title != "undefined") {

      var thisImg;
      if (thisItem.image != null){
        thisImg = thisItem.image.replace(/(\.[^.]*)$/, "_240x$1").replace('http:', '');
      } else {
        thisImg = null;
      }

      var selling_plan_name = thisItem.selling_plan_allocation ? thisItem.selling_plan_allocation.selling_plan.name : null;
      if (selling_plan_name) {
        selling_plan_name = selling_plan_name;
      } else {
        selling_plan_name = null;
      }

      var unitPriceExists;
      if (typeof thisItem.unit_price != "undefined") {
        unitPriceExists = true;
        var unitPrice = thisItem.unit_price;
        var unitReferenceValue = thisItem.unit_price_measurement.reference_value;
        var unitReferenceUnit = thisItem.unit_price_measurement.reference_unit;
      } else {
        unitPriceExists = false;
      }

      thisItem = {
          img: thisImg,
          name: thisItem.product_title,
          qty: thisItem.quantity,
          url: thisItem.url,
          variation: thisItem.variant_title,
          sellingPlan: selling_plan_name,
          vendor: thisItem.vendor,

          price: Shopify.formatMoney(thisItem.price, settings.moneyFormat),
          originalPrice: Shopify.formatMoney(thisItem.original_price, settings.moneyFormat),

          unitPriceExists: unitPriceExists,
          unitPrice: Shopify.formatMoney(unitPrice, settings.moneyFormat),
          unitReferenceValue: unitReferenceValue,
          unitReferenceUnit: unitReferenceUnit,
      }
    }

    // Gather all cart data and add to DOM
    data = {
      items: items,
      thisItem: thisItem,
      note: cart.note,
      totalPrice: Shopify.formatMoney(cart.total_price, settings.moneyFormat),

      cartDiscount: cart.cart_level_discount_applications.length,
      cartDiscounts: cart.cart_level_discount_applications.map(function (obj) {
                      return Object.keys(obj).reduce(function (acc, key) {
                        if (key === "total_allocated_amount") {
                          acc[key] = Shopify.formatMoney(obj[key], settings.moneyFormat);
                        } else {
                          acc[key] = obj[key];
                        }

                        return acc;
                      }, {});
                    }),
      totalCartDiscount: cart.total_discount === 0 ? 0 : {{ 'cart.general.savings_html' | t: price: '[savings]' | json }}.replace('[savings]', Shopify.formatMoney(cart.total_discount, settings.moneyFormat)),
      totalCartDiscountApplied: cart.total_discount === 0 ? false : true
    }

    $cartContainer.append(template(data));

    cartCallback(cart);
  };

  cartCallback = function(cart) {
    $body.removeClass('drawer--is-loading');
    $body.trigger('afterCartLoad.ajaxCart', cart);

    if (window.Shopify && Shopify.StorefrontExpressButtons) {
      Shopify.StorefrontExpressButtons.initialize();
    }
  };

  adjustCart = function () {
    // Delegate all events because elements reload with the cart

    // Add or remove from the quantity
    $body.on('click', '.ajaxcart__qty-adjust', function() {
      if (isUpdating) {
        return;
      }

      var $el = $(this),
          line = $el.data('line'),
          $qtySelector = $el.siblings('.ajaxcart__qty-num'),
          qty = parseInt($qtySelector.val().replace(/\D/g, ''));

      var qty = validateQty(qty);

      // Add or subtract from the current quantity
      if ($el.hasClass('ajaxcart__qty--plus')) {
        qty += 1;
      } else {
        qty -= 1;
        if (qty <= 0) qty = 0;
      }

      // If it has a data-line, update the cart.
      // Otherwise, just update the input's number
      if (line) {
        updateQuantity(line, qty);
      } else {
        $qtySelector.val(qty);
      }
    });

    // Remove from the quantity
    $body.on('click', '.ajaxcart__remove', function() {
      if (isUpdating) {
        return;
      }

      var $el = $(this),
          line = $el.data('line');

      $el.attr('disabled', 'disabled');

      // If it has a data-line, update the cart.
      // Otherwise, just update the input's number
      if (line) {
        updateQuantity(line, 0);
      } else {
        $qtySelector.val(0);
      }
    });

    // Update quantity based on input on change
    $body.on('change', '.ajaxcart__qty-num', function() {
      if (isUpdating) {
        return;
      }

      var $el = $(this),
          line = $el.data('line'),
          qty = parseInt($el.val().replace(/\D/g, ''));

      var qty = validateQty(qty);

      // If it has a data-line, update the cart
      if (line) {
        updateQuantity(line, qty);
      }
    });

    // Prevent cart from being submitted while quantities are changing
    $body.on('submit', 'form.ajaxcart', function(evt) {
      if (isUpdating) {
        evt.preventDefault();
      }
    });

    // Highlight the text when focused
    $body.on('focus', '.ajaxcart__qty-adjust', function() {
      var $el = $(this);
      setTimeout(function() {
        $el.select();
      }, 50);
    });

    function updateQuantity(line, qty) {
      isUpdating = true;

      // Add activity classes when changing cart quantities
      var $row = $('.ajaxcart__row[data-line="' + line + '"]').addClass('is-loading');

      if (qty === 0) {
        $row.parent().addClass('is-removed');
      }

      // Slight delay to make sure removed animation is done
      setTimeout(function() {
        ShopifyAPI.changeItem(line, qty, adjustCartCallback, adjustCartErrorCallback);
      }, 250);
    }

    // Save note anytime it's changed
    $body.on('change', 'textarea[name="note"]', function() {
      var newNote = $(this).val();

      // Update the cart note in case they don't click update/checkout
      ShopifyAPI.updateCartNote(newNote, function(cart) {});
    });
  };

  adjustCartCallback = function (cart) {
    $cartContainer.find('.errors').remove();

    // Update quantity and price
    updateCountPrice(cart);

    // Reprint cart on short timeout so you don't see the content being removed
    setTimeout(function() {
      isUpdating = false;
      ShopifyAPI.getCart(buildCart);
    }, 150)
  };

  adjustCartErrorCallback = function(XMLHttpRequest, textStatus) {
    const data = eval('(' + XMLHttpRequest.responseText + ')');
    const form = $cartContainer.find('form');

    if (data && !!data.message) {
      if (data.status == 422) {
        form.before(`<div class="errors qty-error u-small">${data.description}</div>`);
      }
    } else {
      const message = textStatus === 'error' && !navigator.onLine ? 'No internet connection' : textStatus;
      form.before(`<div class="errors u-small">${message}</div>`);
    }

    isUpdating = false;
    $cartContainer.find('.is-removed').removeClass('is-removed');
    $cartContainer.find('.is-loading').removeClass('is-loading');
    $cartContainer.find('.ajaxcart__remove').attr('disabled', false);
  }

  createQtySelectors = function() {
    // If there is a normal quantity number field in the ajax cart, replace it with our version
    if ($('input[type="number"].js-qty-input', $cartContainer).length) {
      $('input[type="number"].js-qty-input', $cartContainer).each(function() {

        var $el = $(this),
            currentQty = $el.val();

        var itemAdd = currentQty + 1,
            itemMinus = currentQty - 1,
            itemQty = currentQty;

        var source   = $("#AjaxQty").html(),
            template = Handlebars.compile(source),
            data = {
              key: $el.data('id'),
              itemQty: itemQty,
              itemAdd: itemAdd,
              itemMinus: itemMinus
            };

        // Append new quantity selector then remove original
        $el.after(template(data)).remove();
      });
    }
  };

  qtySelectors = function(form) {
    // Change number inputs to JS ones, similar to ajax cart but without API integration.
    // Make sure to add the existing name and id to the new input element
    const setUpNumInputs = (el) => {
      if (!el.parentElement.classList.contains('js-qty')) {
        var $el = $(el),
            currentQty = $el.val(),
            inputName = $el.attr('name'),
            inputId = $el.attr('id'),
            formId = $el.attr('form');

        var itemAdd = currentQty + 1,
            itemMinus = currentQty - 1,
            itemQty = currentQty;

        var source   = $("#JsQty").html(),
            template = Handlebars.compile(source),
            data = {
              key: $el.data('id'),
              itemQty: itemQty,
              itemAdd: itemAdd,
              itemMinus: itemMinus,
              inputName: inputName,
              inputId: inputId,
              formId: formId
            };

        // Append new quantity selector then remove original
        $el.after(template(data)).remove();
      }
    }

    const numberAdjust = (e) => {
      var $el = $(e.target),
          id = $el.data('id'),
          $qtySelector = $el.siblings('.js-qty__num'),
          qty = parseInt($qtySelector.val().replace(/\D/g, ''));

      var qty = validateQty(qty);

      // Add or subtract from the current quantity
      if ($el.hasClass('js-qty__adjust--plus')) {
        qty += 1;
      } else {
        qty -= 1;
        if (qty <= 1) qty = 1;
      }

      // Update the input's number
      $qtySelector.val(qty);
    }

    if (form) {
      const numInputs = form.querySelector('input[type="number"].js-qty-input') || document.querySelector(`input[type="number"][form="${form.getAttribute('id')}"].js-qty-input`);

      if (numInputs) {
        setUpNumInputs(numInputs);
      }

      const qtyAdjustButtons = $(form).find('.js-qty__adjust').length > 0 ?
        $(form).find('.js-qty__adjust') :
        $(`input[type="number"][form="${form.getAttribute('id')}"].js-qty-input`).parent().find('.js-qty__adjust');

      $(qtyAdjustButtons).on('click', numberAdjust);
    } else {
      const numInputs = document.querySelectorAll('input[type="number"].js-qty-input');

      Array.from(numInputs).forEach((el) => setUpNumInputs(el));

      $('.js-qty__adjust').on('click', numberAdjust);
    }
  };

  validateQty = function (qty) {
    if((parseFloat(qty) == parseInt(qty)) && !isNaN(qty)) {
      // We have a valid number!
    } else {
      // Not a number. Default to 1.
      qty = 1;
    }
    return qty;
  };

  module = {
    init: init,
    initForm: initForm,
    load: loadCart
  };

  return module;

}(ajaxCart || {}, jQuery));
